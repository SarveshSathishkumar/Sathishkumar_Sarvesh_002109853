/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Encounter;
import model.Patient;
import model.Person;
import model.Person_directory;
import model.VitalSigns;

/**
 *
 * @author sarveshzeke
 */
public class VitalSign extends javax.swing.JPanel {

    /**
     * Creates new form VitalSign
     */
   
     Person person;
     Encounter en1;
     Patient patient;
     Person_directory person_directory;
     JPanel userProcessor;
     VitalSigns vitals;
     DefaultTableModel model;
     ArrayList<Person> personDetails;
     
   
    public VitalSign(JPanel userProcessor,Patient patient , Person_directory person_directory) {
        
        this.patient = patient;
        this.userProcessor= userProcessor;
        this.person_directory= person_directory;
        personDetails = person_directory.getPerson_directory();
       this.en1 = new Encounter();
        initComponents();
        populatePatientsTable(personDetails);
        populateVitalSignTable(null);
       
    }
    
    private void populatePatientsTable(ArrayList<Person> personDetails) {
        DefaultTableModel model = (DefaultTableModel) vitalstbl.getModel();
        model.setRowCount(0);
        if(personDetails.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for(Person person : personDetails) {
            Object[] row = new Object[10];
            row[0] = person;
            row[1]=  person.getAge();
            row[2] = person.getContactno();
            row[3] = person.getZipcode();
            row[4] = person.getCommunity();
            row[5] = person.getHouse();
            row[6] = person.getCity();
            
          //  row[7] = vitals.getBlood_pressure();
            if(person.getPatient()!=null)
            {
                row[7] = person.getPatient().getAvailability();
            }
            else
            {
                row[7] = "Not a Patient";
            }
            if(person.getPatient()!=null)
            {
                row[8] = person.getPatient().getDoctorName();
            }
            else
            {
                row[8] = "Not Assigned";
            }
//            if(person.getPatient()!=null)
//            {
//                row[9] = vitals.getBlood_pressure();
//                        
//            }
//            else
//            {
//                row[9] = "Not Assigned";
//            }
            
            model.addRow(row);
            
        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalstbl = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl3 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        vitalstbl.setBackground(new java.awt.Color(102, 102, 102));
        vitalstbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Contact No", "Zipcode", "Community", "House", "City", "Patient_Ref", "Doctor Name"
            }
        ));
        jScrollPane1.setViewportView(vitalstbl);

        jButton2.setText("Create Vital Signs");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tbl3.setBackground(new java.awt.Color(204, 153, 255));
        tbl3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ref_No", "Community", "Date", "Report"
            }
        ));
        jScrollPane2.setViewportView(tbl3);

        jButton4.setText("View Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(964, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButton3)
                        .addGap(185, 185, 185)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
  
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = vitalstbl.getSelectedRow();
        if (selectedRow < 0) {
            populateVitalSignTable(null);
        } else {
            Person person = (Person) vitalstbl.getValueAt(selectedRow, 0);
            Patient patient= person.getPatient();
            if(patient!=null)
            {

                populateVitalSignTable(person);
            }
            else
            {
                populateVitalSignTable(null);
            }
        }
//        panel3.setVisible(true);
//        int selectedRow = tbl2.getSelectedRow();
//        if (selectedRow < 0) {
//            populateVitalSignTable(null);
//        }
        //else {
//            Person person = (Person) tbl2.getValueAt(selectedRow, 0);
//            Patient patient= person.getPatient();
//            if(patient!=null)
//            {
//                Report r  = new Report(userProcessor,patient);
//                userProcessor.add("r", r);
//                CardLayout layout = (CardLayout) userProcessor.getLayout();
//                layout.next(userProcessor);
//                populateVitalSignTable(person);
//            }
//            else
//            {
//                populateVitalSignTable(null);
//            }
        //}
        
//        int selectedRow = tbl3.getSelectedRow();
//        if (selectedRow < 0) {
//            JOptionPane.showMessageDialog(this, "Please select a row from table.",
//                    "Error", JOptionPane.INFORMATION_MESSAGE);
//            return;
//        }
//        VitalSigns vitalSign = (VitalSigns) tbl3.getValueAt(selectedRow, 0);
//        ViewUpdateVitalSignsJPanel vuvsJPanel = new ViewUpdateVitalSignsJPanel(userProcessContainer,
//                vitalSign, Boolean.FALSE);
//        userProcessor.add("vuvsJPanel", vuvsJPanel);
//        CardLayout layout = (CardLayout) userProcessor.getLayout();
//        layout.next(userProcessor);
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = vitalstbl.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) vitalstbl.getValueAt(selectedRow, 0);
        Patient patient= person.getPatient();
        if(patient!=null)
        {
                Report r  = new Report(userProcessor,patient);
                userProcessor.add("r", r);
                CardLayout layout = (CardLayout) userProcessor.getLayout();
                layout.next(userProcessor);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
               
            //    populateVitalSignTable(person);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessor.remove(this);
        CardLayout layout = (CardLayout) userProcessor.getLayout();
        layout.previous(userProcessor);
    }//GEN-LAST:event_jButton3ActionPerformed
private void checkbycomm2(String comm2)
            {
//        String comm = commcmbbx.getSelectedItem().toString();
        //String ref = patidtf.getText();
        
//        model = (DefaultTableModel) tbl3.getModel();
//        TableRowSorter<DefaultTableModel> str = new TableRowSorter<>(model);
//        tbl3.setRowSorter(str);
//        str.setRowFilter(RowFilter.regexFilter(comm2));
    }
    private void checkbycomm(String comm)
            {
//        String comm = commcmbbx.getSelectedItem().toString();
        //String ref = patidtf.getText();
        
        model = (DefaultTableModel) vitalstbl.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        tbl3.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(comm));
    }
    private void populateVitalSignTable(Person person) {
        
        DefaultTableModel model = (DefaultTableModel) tbl3.getModel();
        model.setRowCount(0);
        if (person != null) {
            int patientAge = person.getAge();
            
            ArrayList<VitalSigns> vitalDetails = person.getPatient().getEncounter().getEncounterhistory();
            
            if (vitalDetails.isEmpty()) {
                 JOptionPane.showMessageDialog(this, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (VitalSigns vitalSign : vitalDetails) {
               
                Object[] row = new Object[4];
                row[0] = person.getPatient().getAvailability();
                row[1] = person.getCommunity();
                row[2] = vitalSign;
                row[3] = VitalSignStatus(patientAge, vitalSign);
                model.addRow(row);
            }
        }
    }
    
    private String VitalSignStatus(int patientAge, VitalSigns vitalSign) {
        String vitalSignStatus = "Normal";
        
        
        int heartRate = vitalSign.getHeart_rate();
        int bloodPressure = vitalSign.getBlood_pressure();
        
        
        /*Toddler*/
        if(bloodPressure < 80 || bloodPressure > 110)
        {
//        if (patientAge >= 1 && patientAge <= 3) {
//         //   if((heartRate < 80 || heartRate > 130) 
//                    && (bloodPressure < 80 || bloodPressure > 110)){
                    
                vitalSignStatus = "Abnormal";
            }
        
        /*Preschooler*/
//        if (patientAge >= 4 && patientAge <= 5) {
//            if ((heartRate < 80 || heartRate > 120)
//                    || (bloodPressure < 80 || bloodPressure > 110))
//                     {
//                vitalSignStatus = "Abnormal";
//            }
//        }
//        /*School Age*/
//        if (patientAge >= 6 && patientAge <= 12) {
//            if ((heartRate < 70 || heartRate > 110)
//                    || (bloodPressure < 80 || bloodPressure > 120)
//                   ) {
//                vitalSignStatus = "Abnormal";
//            }
//        }
//        /*Adolescent*/
//        if (patientAge >= 13) {
//            if ((heartRate < 55 || heartRate > 105)
//                    || (bloodPressure < 110 || bloodPressure > 120)
//                    ) {
//                vitalSignStatus = "Abnormal";
//            }
//        }
        return vitalSignStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl3;
    public javax.swing.JTable vitalstbl;
    // End of variables declaration//GEN-END:variables

//    private void populatePatientsTable1(ArrayList<Person> personDetails) {
//        int selected_row = vitalstbl.getSelectedRow();
//         this.vitals = new VitalSigns(); 
//        DefaultTableModel model = (DefaultTableModel) vitalstbl1.getModel();
//        model.setRowCount(0);
////        if (person != null) {
////            int patientAge = person.getAge();
////            
////            ArrayList<VitalSigns> vitalDetails = person.getPatient().getEncounter().getEncounterhistory();
////            
////            if (vitalDetails.isEmpty()) {
////                 JOptionPane.showMessageDialog(this, "No vital signs found. Please"
////                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
////                return;
////            }
////         ArrayList<VitalSigns> vitalDetails = person.getPatient().getEncounter().getEncounterhistory();
//            for (Person person : personDetails) {
//               
//                Object[] row = new Object[10];
//                row[0] = person;
//                row[1]=  person.getAge();
//                row[2] = person.getContactno();
//                row[3] = person.getZipcode();
//                row[4] = person.getCommunity();
//                row[5] = person.getHouse();
//                row[6] = person.getCity();
//                row[7] = person.getPatient().getAvailability();
//                row[8] = person.getPatient().getDoctorName();
//                row[9] = vitals.getBlood_pressure();
//               //
//                        //person.getPatient().getEncounter().getVitalSigns().getBlood_pressure();
//                         // row[10]= VitalSignStatus(patientAge, vitalSign);
//                        // getVitalSigns().getBlood_pressure()
//                model.addRow(row);
//            }
//            
       // }
    }

   

